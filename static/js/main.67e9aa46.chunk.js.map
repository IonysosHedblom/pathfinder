{"version":3,"sources":["algorithms/recursiveDivison.js","components/Node.jsx","components/Menu.jsx","components/Info.jsx","components/Tutorial.jsx","algorithms/dijkstra.js","algorithms/astar.js","algorithms/depthfirstsearch.js","algorithms/randomMaze.js","components/Board.jsx","App.js","index.js"],"names":["walls","Node","props","row","column","status","onMouseDown","onMouseEnter","onMouseUp","typeOfNode","shortestClass","shortest","className","id","Menu","algorithm","setAlgorithm","disable","startVisualize","setDisable","algorithmSpeed","setAlgorithmSpeed","setSpeedValue","speedValue","clearWalls","resetAll","recursiveDivisionMaze","buildRandomMaze","buildRandomWeightMaze","showTutorial","setShowTutorial","useState","showAlgos","setShowAlgos","showMazes","setShowMazes","showSpeedMenu","setShowSpeedMenu","algoDropdown","useRef","mazeDropdown","speedDropdown","closeDropdowns","useCallback","e","current","contains","target","useEffect","document","addEventListener","removeEventListener","changeAlgorithm","innerText","setSpeed","ref","onClick","Info","Tutorial","currentPage","setCurrentPage","page","disabled","href","rel","sortNodesByDistance","nodes","sort","node","nodeTwo","distance","getAllNodes","grid","push","updateUnvisitedNeighbors","unvisitedNeighbors","neighbors","length","filter","neighbor","isVisited","getUnvisitedNeighbors","previousNode","getNeighbours","neighbours","neighbour","neighbourNotInUnvisitedNodes","unvisitedNodes","calculatedManhattanDistance","Math","abs","getUnvisitedNeighbours","range","len","result","i","getWalls","vertical","horizontal","start","direction","number","generateOddNum","addWall","slice","indexOf","isStartFinish","temporaryWalls","temporary","splice","generateEvenNum","wall","array","maxNum","randomNum","floor","random","max","randomMaze","forEach","Board","height","documentElement","clientHeight","width","clientWidth","calculatedRows","calculatedColumns","initialStartRow","initialStartColumn","initialTargetRow","initialTargetColumn","createNode","Infinity","totalDistance","createInitialGrid","currentRow","setGrid","isStartNodePressed","isTargetNodePressed","pressedNode","setPressedNode","prevCoordinates","setPrevCoordinates","currentStartCoordinates","setCurrentStartCoordinates","currentTargetCoordinates","setCurrentTargetCoordinates","prevTargetCoordinates","setPrevTargetCoordinates","setAlgoDone","weightKeyPressed","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","window","useKeyPress","buildWalls","getElementById","classList","add","remove","handleMouseUp","newGrid","nodeById","newNode","updateWalls","visualizeDijkstras","removePattern","resetGrid","visitedNodesInOrder","closestNode","shift","dijkstra","nodesInShortestPath","currentNode","unshift","getNodesInShortestPath","animateAlgorithm","visualizeAstar","a","b","astar","nodesInShortestPathAstar","visualizeDfs","unvisitedNeighbours","unvisitedNeighbour","depthFirstSearch","nodesInShortestPathDfs","setTimeout","animateShortestPath","animateMaze","getGridWithMaze","animateWeightMaze","weights","weight","getGridWithWeightMaze","recursiveDivision","styles","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.67e9aa46.chunk.js","sourcesContent":["let walls;\n\nexport const recursiveDivision = (grid, start, target) => {\n  walls = [];\n  if (!start || !target) {\n    return;\n  }\n\n  let vertical = range(grid[0].length);\n  let horizontal = range(grid.length);\n\n  getWalls(vertical, horizontal, grid, start, target);\n  return walls;\n};\n\nconst range = len => {\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst getWalls = (vertical, horizontal, grid, start, target) => {\n  if (vertical.length < 2 || horizontal.length < 2) {\n    return;\n  }\n  let direction;\n  let number;\n  if (vertical.length > horizontal.length) {\n    direction = 0;\n    number = generateOddNum(vertical);\n  }\n  if (vertical.length <= horizontal.length) {\n    direction = 1;\n    number = generateOddNum(horizontal);\n  }\n  if (direction === 0) {\n    addWall(direction, number, vertical, horizontal, start, target);\n    getWalls(\n      vertical.slice(0, vertical.indexOf(number)),\n      horizontal,\n      grid,\n      start,\n      target\n    );\n    getWalls(\n      vertical.slice(vertical.indexOf(number) + 1),\n      horizontal,\n      grid,\n      start,\n      target\n    );\n  } else {\n    addWall(direction, number, vertical, horizontal, start, target);\n    getWalls(\n      vertical,\n      horizontal.slice(0, horizontal.indexOf(number)),\n      grid,\n      start,\n      target\n    );\n    getWalls(\n      vertical,\n      horizontal.slice(horizontal.indexOf(number) + 1),\n      grid,\n      start,\n      target\n    );\n  }\n};\n\nconst addWall = (direction, number, vertical, horizontal, start, target) => {\n  let isStartFinish = false;\n  const temporaryWalls = [];\n  if (direction === 0) {\n    if (horizontal.length === 2) return;\n    for (let temporary of horizontal) {\n      if (\n        (temporary === start.row && number === start.column) ||\n        (temporary === target.row && number === target.column)\n      ) {\n        isStartFinish = true;\n        continue;\n      }\n      temporaryWalls.push([temporary, number]);\n    }\n  } else {\n    if (vertical.length === 2) return;\n    for (let temporary of vertical) {\n      if (\n        (number === start.row && temporary === start.column) ||\n        (number === target.row && temporary === target.column)\n      ) {\n        isStartFinish = true;\n        continue;\n      }\n      temporaryWalls.push([number, temporary]);\n    }\n  }\n  if (!isStartFinish) {\n    temporaryWalls.splice(generateEvenNum(temporaryWalls.length), 1);\n  }\n  for (let wall of temporaryWalls) {\n    walls.push(wall);\n  }\n};\n\nconst generateOddNum = array => {\n  const maxNum = array.length - 1;\n  let randomNum =\n    Math.floor(Math.random() * (maxNum / 2)) +\n    Math.floor(Math.random() * (maxNum / 2));\n  if (randomNum % 2 === 0) {\n    if (randomNum === maxNum) {\n      randomNum--;\n    } else {\n      randomNum++;\n    }\n  }\n  return array[randomNum];\n};\n\nconst generateEvenNum = max => {\n  let randomNum =\n    Math.floor(Math.random() * (max / 2)) +\n    Math.floor(Math.random() * (max / 2));\n  if (randomNum % 2 !== 0) {\n    if (randomNum === max) {\n      randomNum--;\n    } else {\n      randomNum++;\n    }\n  }\n  return randomNum;\n};\n","import React from 'react';\n\nimport styles from '../assets/styles/Node.css';\n\nconst Node = props => {\n  const {\n    row,\n    column,\n    status,\n    onMouseDown,\n    onMouseEnter,\n    onMouseUp,\n    shortest,\n  } = props;\n\n  const typeOfNode =\n    status === 'start'\n      ? 'start'\n      : status === 'target'\n      ? 'target'\n      : status === 'wall'\n      ? 'wall'\n      : '';\n\n  const shortestClass = shortest ? 'node-shortest-path' : '';\n\n  return (\n    <td\n      onMouseDown={() => onMouseDown(row, column)}\n      onMouseEnter={() => onMouseEnter(row, column)}\n      onMouseUp={() => onMouseUp(row, column)}\n      className={`node ${typeOfNode} ${shortestClass}`}\n      id={`${row}-${column}`}\n    ></td>\n  );\n};\n\nexport default Node;\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\n\nimport '../assets/styles/Menu.css';\n\nconst Menu = ({\n  algorithm,\n  setAlgorithm,\n  disable,\n  setDisable,\n  startVisualize,\n  algorithmSpeed,\n  setAlgorithmSpeed,\n  speedValue,\n  setSpeedValue,\n  clearWalls,\n  resetAll,\n  recursiveDivisionMaze,\n  buildRandomMaze,\n  buildRandomWeightMaze,\n  showTutorial,\n  setShowTutorial,\n}) => {\n  const [showAlgos, setShowAlgos] = useState(false);\n  const [showMazes, setShowMazes] = useState(false);\n  const [showSpeedMenu, setShowSpeedMenu] = useState(false);\n  const algoDropdown = useRef(null);\n  const mazeDropdown = useRef(null);\n  const speedDropdown = useRef(null);\n\n  const toggleAlgoDropdown = () => {\n    setShowAlgos(!showAlgos);\n    setShowMazes(false);\n    setShowSpeedMenu(false);\n  };\n\n  const toggleMazeDropdown = () => {\n    setShowMazes(!showMazes);\n    setShowAlgos(false);\n    setShowSpeedMenu(false);\n  };\n\n  const toggleSpeedDropdown = () => {\n    setShowSpeedMenu(!showSpeedMenu);\n    setShowMazes(false);\n    setShowAlgos(false);\n  };\n  const toggleTutorial = e => {\n    setShowTutorial(!showTutorial);\n  };\n  const closeDropdowns = useCallback(\n    e => {\n      if (!algoDropdown.current.contains(e.target)) {\n        setShowAlgos(false);\n      }\n      if (!mazeDropdown.current.contains(e.target)) {\n        setShowMazes(false);\n      }\n      if (!speedDropdown.current.contains(e.target)) {\n        setShowSpeedMenu(false);\n      }\n    },\n    [algoDropdown.current, mazeDropdown.current, speedDropdown.current]\n  );\n\n  useEffect(() => {\n    document.addEventListener('click', closeDropdowns);\n\n    return () => {\n      document.removeEventListener('click', closeDropdowns);\n    };\n  }, []);\n\n  const changeAlgorithm = e => {\n    if (e.target.innerText === \"Dijkstra's Algorithm\") {\n      setAlgorithm('dijkstra');\n    } else if (e.target.innerText === 'A* Search') {\n      setAlgorithm('astar');\n    } else if (e.target.innerText === 'Depth-first Search') {\n      setAlgorithm('dfs');\n    }\n  };\n\n  const setSpeed = e => {\n    if (e.target.innerText === 'Normal') {\n      setAlgorithmSpeed('Normal');\n      setSpeedValue(25);\n    } else if (e.target.innerText === 'Fast (default)') {\n      setAlgorithmSpeed('Fast');\n      setSpeedValue(10);\n    } else if (e.target.innerText === 'Slow') {\n      setAlgorithmSpeed('Slow');\n      setSpeedValue(100);\n    } else if (e.target.innerText === 'Ultra Slow') {\n      setAlgorithmSpeed('Ultra Slow');\n      setSpeedValue(500);\n    }\n  };\n\n  return (\n    <div className='menu'>\n      <h1>The Pathfinder</h1>\n      <nav>\n        <ul className='menu-list'>\n          <li ref={algoDropdown} onClick={() => toggleAlgoDropdown()}>\n            Algorithms\n            <span className='dropdown-arrow'></span>\n            <ul className={showAlgos === true ? 'algo-dropdown' : 'hidden'}>\n              <li onClick={e => changeAlgorithm(e)}>Dijkstra's Algorithm</li>\n              <li onClick={e => changeAlgorithm(e)}>A* Search</li>\n              <li onClick={e => changeAlgorithm(e)}>Depth-first Search</li>\n            </ul>\n          </li>\n\n          <li ref={mazeDropdown} onClick={() => toggleMazeDropdown()}>\n            Build Maze<span className='dropdown-arrow'></span>\n            <ul className={showMazes === true ? 'maze-dropdown' : 'hidden'}>\n              <li onClick={() => recursiveDivisionMaze()}>\n                Recursive Division\n              </li>\n              <li onClick={() => buildRandomMaze()}>Random maze pattern</li>\n              <li onClick={() => buildRandomWeightMaze()}>\n                Random Weight Maze\n              </li>\n            </ul>\n          </li>\n          <li ref={speedDropdown} onClick={() => toggleSpeedDropdown()}>\n            Speed: {algorithmSpeed}\n            <span className='dropdown-arrow'></span>\n            <ul\n              className={showSpeedMenu === true ? 'speed-dropdown' : 'hidden'}\n            >\n              <li onClick={e => setSpeed(e)}>Ultra Slow</li>\n\n              <li onClick={e => setSpeed(e)}>Slow</li>\n              <li onClick={e => setSpeed(e)}>Normal</li>\n              <li onClick={e => setSpeed(e)}>Fast (default)</li>\n            </ul>\n          </li>\n          <li>\n            <button\n              onClick={() => startVisualize()}\n              className={disable ? 'disabled' : ''}\n            >\n              Start{' '}\n              {algorithm === 'dijkstra'\n                ? \"Dijkstra's\"\n                : algorithm === 'astar'\n                ? 'A*'\n                : algorithm === 'dfs'\n                ? 'DFS'\n                : ''}\n            </button>\n          </li>\n          <li onClick={() => clearWalls()}>Clear walls</li>\n          <li onClick={() => resetAll()}>Reset board</li>\n\n          <li onClick={e => toggleTutorial(e)}>Tutorial</li>\n        </ul>\n      </nav>\n    </div>\n  );\n};\n\nexport default Menu;\n","import React from 'react';\nimport '../assets/styles/Info.css';\n\nconst Info = ({ algorithm, setAlgorithm }) => {\n  return (\n    <div className='info'>\n      <ul>\n        <li>\n          <div className='info-start'></div>Start Node\n        </li>\n        <li>\n          <div className='info-target'></div>Target Node\n        </li>\n        <li>\n          <div className='info-weight'></div>Weight Node\n        </li>\n        <li>\n          <div className='info-unvisited'></div>Unvisited Node\n        </li>\n        <li>\n          <div className='info-visited'></div>\n          <div className='info-visited2'></div>Visited Nodes\n        </li>\n\n        <li>\n          <div className='info-wall'></div>Wall Node\n        </li>\n        <li>\n          <div className='info-shortest'></div>Shortest-path Node\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Info;\n","import React, { useState } from \"react\";\n\nimport \"../assets/styles/Tutorial.css\";\n\nconst Tutorial = ({ showTutorial, setShowTutorial }) => {\n  const closeTutorial = (e) => {\n    setShowTutorial(false);\n  };\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const handlePreviousClick = (e) => {\n    if (currentPage === 1) {\n      setCurrentPage(8);\n    } else {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  const handleNextClick = (e) => {\n    if (currentPage === 7) {\n      setCurrentPage(1);\n    } else {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n  const page =\n    currentPage === 1 ? (\n      <div className=\"tutorial-page\">\n        <h3>\n          Welcome to The Pathfinder App!\n          <hr />\n        </h3>\n\n        <h6>\n          Press{\" \"}\n          <span className=\"next-span\">\n            <button disabled>Next</button>\n          </span>{\" \"}\n          to see how it works.\n        </h6>\n        <div className=\"rocket-img\"></div>\n      </div>\n    ) : currentPage === 2 ? (\n      <div className=\"tutorial-page\">\n        <h3>\n          Choose an algorithm\n          <hr className=\"hr-page-two\" />\n        </h3>\n        <h6 className=\"page-three-h6\">\n          Choose an algorithm from the \"Algorithms\" drop-down menu at the\n          top-left of your screen.\n        </h6>\n\n        <div className=\"algo-img\"></div>\n      </div>\n    ) : currentPage === 3 ? (\n      <div className=\"tutorial-page-four\">\n        <h3>\n          Meet the available algorithms\n          <hr />\n        </h3>\n\n        <ul>\n          <li>\n            <span>Dijkstra's Algorithm</span> (weighted): the father of\n            pathfinding algorithms; guarantees the shortest path\n          </li>\n          <li>\n            <span>A* Search</span> (weighted): arguably the best pathfinding\n            algorithm; uses heuristics to guarantee the shortest path much\n            faster than Dijkstra's algorithm\n          </li>\n          <li>\n            <span>Depth-first Search</span> (unweighted): a very bad algorithm\n            for pathfinding; does not guarantee the shortest path. I chose to\n            include this algorithm so that the user can see the differences\n            between a good pathfinding algorithm and a bad one.\n          </li>\n        </ul>\n      </div>\n    ) : currentPage === 4 ? (\n      <div className=\"tutorial-page-five\">\n        <h3>\n          Adding walls\n          <hr />\n        </h3>\n        <h6>\n          <span>Walls: </span>Click and drag - Can not pass through.\n        </h6>\n        <h6>\n          <span>Weights: </span>Click and drag while holding \"W\"-key - Can pass\n          through.\n        </h6>\n\n        <div className=\"walls-gif\"></div>\n      </div>\n    ) : currentPage === 5 ? (\n      <div className=\"tutorial-page\">\n        <h3>\n          Visualize and more!\n          <hr />\n        </h3>\n        <h6 className=\"page-seven-h6\">\n          Use the navbar buttons to visualize algorithms, change the speed of\n          the visualizer or let the app build a maze for you.\n        </h6>\n\n        <div className=\"navbar-img\"></div>\n      </div>\n    ) : currentPage === 6 ? (\n      <div className=\"tutorial-page\">\n        <h3>\n          What is the purpose of The Pathfinder?\n          <hr />\n        </h3>\n        <h6 className=\"page-two-h6\">\n          Essentially, The Pathfinder is a pathfinding algorithm visualizer.\n        </h6>\n        <div className=\"page-two-paragraphs\">\n          <p className=\"page-two-explanation\">\n            A pathfinding algorithm seeks out the shortest path between a given\n            starting point and ending point. This application visualizes a\n            selection of pathfinding algorithms in action, and more.\n          </p>\n          <p className=\"page-two-explanation\">\n            The algorithms available in The Pathfinder are adapted for a 2D\n            grid, where 90 degree turns have a \"cost\" of 1 and movements from a\n            node to another also have a \"cost\" of 1. In this application,\n            weights have a \"cost\" of 10.\n          </p>\n        </div>\n\n        <div className=\"path-img\"></div>\n      </div>\n    ) : currentPage === 7 ? (\n      <div className=\"tutorial-page-eight\">\n        <h3>\n          Hope you enjoy my application!\n          <hr />\n        </h3>\n        <h6>\n          If you are interested in the source code for this application, visit\n          my{\" \"}\n          <a\n            className=\"github-link\"\n            href=\"https://github.com/IonysosHedblom\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            Github\n          </a>\n        </h6>\n      </div>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <>\n      {showTutorial ? (\n        <div className=\"tutorial-container\">\n          {page}\n          <div className=\"tutorial-button-group\">\n            <button\n              onClick={(e) => closeTutorial(e)}\n              className=\"tutorial-button skip\"\n            >\n              Skip Tutorial\n            </button>\n            <button\n              onClick={(e) => handlePreviousClick(e)}\n              className=\"tutorial-button previous\"\n            >\n              Previous\n            </button>\n            <button\n              onClick={(e) => handleNextClick(e)}\n              className=\"tutorial-button next\"\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n};\n\nexport default Tutorial;\n","// Performs Dijkstras algorithm, returns all nodes in the order which they were visited.\nexport const dijkstra = (grid, start, target) => {\n  const visitedNodesInOrder = [];\n  start.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n\n    // If wall is encountered. Skip it.\n    if (closestNode.status === 'wall') continue;\n\n    // If the closest node is at a distance of infinity, we are trapped.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === target) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n};\n\nconst sortNodesByDistance = nodes => {\n  nodes.sort((node, nodeTwo) => node.distance - nodeTwo.distance);\n};\n\nconst getAllNodes = grid => {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n};\n\nconst getUnvisitedNeighbors = (node, grid) => {\n  const neighbors = [];\n  const { row, column } = node;\n  if (row > 0) neighbors.push(grid[row - 1][column]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][column]);\n  if (column > 0) neighbors.push(grid[row][column - 1]);\n  if (column < grid[0].length - 1) neighbors.push(grid[row][column + 1]);\n\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n};\n\nconst updateUnvisitedNeighbors = (node, grid) => {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    if (neighbor.status === 'weight') {\n      neighbor.distance = node.distance + 10;\n    } else {\n      neighbor.distance = node.distance + 1;\n    }\n    neighbor.previousNode = node;\n  }\n};\n\nexport const getNodesInShortestPath = target => {\n  const nodesInShortestPath = [];\n  let currentNode = target;\n  while (currentNode !== null) {\n    nodesInShortestPath.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPath;\n};\n","export const astar = (grid, start, target) => {\n  if (!start || !target) {\n    return;\n  }\n  const unvisitedNodes = [];\n  const visitedNodesInOrder = [];\n\n  start.distance = 0;\n  unvisitedNodes.push(start);\n\n  while (!!unvisitedNodes.length) {\n    unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\n\n    let closestNode = unvisitedNodes.shift();\n    if (closestNode === target) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    let neighbours = getNeighbours(closestNode, grid);\n\n    for (let neighbour of neighbours) {\n      let distance;\n      if (closestNode.status === 'weight') {\n        distance = closestNode.distance + 15;\n      } else {\n        distance = closestNode.distance + 1;\n      }\n\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\n        unvisitedNodes.unshift(neighbour);\n        neighbour.distance = distance;\n        neighbour.totalDistance =\n          distance + calculatedManhattanDistance(neighbour, target);\n        neighbour.previousNode = closestNode;\n      } else if (distance < neighbour.distance) {\n        neighbour.distance = distance;\n        neighbour.totalDistance =\n          distance + calculatedManhattanDistance(neighbour, target);\n        neighbour.previousNode = closestNode;\n      }\n    }\n  }\n  return visitedNodesInOrder;\n};\n\nconst getNeighbours = (node, grid) => {\n  let neighbours = [];\n  let { row, column } = node;\n  if (column !== grid[0].length - 1) neighbours.push(grid[row][column + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][column]);\n  if (column !== 0) neighbours.push(grid[row][column - 1]);\n  if (row !== 0) neighbours.push(grid[row - 1][column]);\n  return neighbours.filter(\n    neighbour => neighbour.status !== 'wall' && !neighbour.isVisited\n  );\n};\n\nconst neighbourNotInUnvisitedNodes = (neighbour, unvisitedNodes) => {\n  for (let node of unvisitedNodes) {\n    if (node.row === neighbour.row && node.column === neighbour.column) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst calculatedManhattanDistance = (node, target) => {\n  const x = Math.abs(node.row - target.row);\n  const y = Math.abs(node.column - target.column);\n  return x + y;\n};\n\nexport const nodesInShortestPathAstar = target => {\n  const nodesInShortestPath = [];\n  let currentNode = target;\n  while (currentNode !== null) {\n    nodesInShortestPath.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPath;\n};\n","export const depthFirstSearch = (grid, start, target) => {\n  const unvisitedNodes = [];\n  const visitedNodesInOrder = [];\n  unvisitedNodes.push(start);\n  while (!!unvisitedNodes.length) {\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.status === 'wall') continue;\n    if (closestNode === target) return visitedNodesInOrder;\n    visitedNodesInOrder.push(closestNode);\n    closestNode.isVisited = true;\n    const unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\n    for (let unvisitedNeighbour of unvisitedNeighbours) {\n      unvisitedNeighbour.previousNode = closestNode;\n      unvisitedNodes.unshift(unvisitedNeighbour);\n    }\n  }\n  return visitedNodesInOrder;\n};\n\nconst getUnvisitedNeighbours = (node, grid) => {\n  let neighbours = [];\n  let { row, column } = node;\n  if (column !== 0) neighbours.push(grid[row][column - 1]);\n  if (row !== 0) neighbours.push(grid[row - 1][column]);\n  if (column !== grid[0].length - 1) neighbours.push(grid[row][column + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][column]);\n  return neighbours.filter(neighbour => !neighbour.isVisited);\n};\n\nexport const nodesInShortestPathDfs = target => {\n  const nodesInShortestPath = [];\n  let currentNode = target;\n  while (currentNode !== null) {\n    nodesInShortestPath.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPath;\n};\n","export const randomMaze = (grid, start, target) => {\n  if (!start || !target) {\n    return false;\n  }\n\n  let walls = [];\n  grid.forEach(row => {\n    row.forEach(node => {\n      if (\n        !(\n          (node.row === start.row && node.column === start.column) ||\n          (node.row === target.row && node.column === target.column)\n        )\n      ) {\n        if (Math.random() < 0.3) {\n          walls.push([node.row, node.column]);\n        }\n      }\n    });\n  });\n  walls.sort(() => Math.random() - 0.5);\n  return walls;\n};\n","import React, { useState, Fragment, useEffect } from \"react\";\nimport Node from \"./Node\";\nimport Menu from \"./Menu\";\nimport Info from \"./Info\";\nimport Tutorial from \"./Tutorial\";\nimport styles from \"../assets/styles/Board.css\";\n\nimport { dijkstra, getNodesInShortestPath } from \"../algorithms/dijkstra\";\nimport { astar, nodesInShortestPathAstar } from \"../algorithms/astar\";\nimport {\n  depthFirstSearch,\n  nodesInShortestPathDfs,\n} from \"../algorithms/depthfirstsearch\";\nimport { recursiveDivision } from \"../algorithms/recursiveDivison\";\nimport { randomMaze } from \"../algorithms/randomMaze\";\n\nconst Board = () => {\n  const [algorithm, setAlgorithm] = useState(\"\");\n  const [algorithmSpeed, setAlgorithmSpeed] = useState(\"Fast\");\n  const [speedValue, setSpeedValue] = useState(10);\n\n  const [showTutorial, setShowTutorial] = useState(true);\n\n  const height = document.documentElement.clientHeight;\n  const width = document.documentElement.clientWidth;\n\n  let calculatedRows = Math.floor(height / 30) - 7;\n  let calculatedColumns = Math.floor(width / 30);\n\n  const initialStartRow = Math.floor(calculatedRows / 2);\n  const initialStartColumn = Math.floor(calculatedColumns / 4);\n\n  const initialTargetRow = Math.floor(calculatedRows / 2);\n  const initialTargetColumn = Math.floor((3 * calculatedColumns) / 4);\n\n  const createNode = (row, column) => {\n    return {\n      row,\n      column,\n      status:\n        row === initialStartRow && column === initialStartColumn\n          ? \"start\"\n          : row === initialTargetRow && column === initialTargetColumn\n          ? \"target\"\n          : \"\",\n      isVisited: false,\n      distance: Infinity,\n      totalDistance: Infinity,\n      previousNode: null,\n      shortest: false,\n    };\n  };\n\n  const createInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < calculatedRows; row++) {\n      const currentRow = [];\n      for (let column = 0; column < calculatedColumns; column++) {\n        currentRow.push(createNode(row, column));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  const [grid, setGrid] = useState(createInitialGrid);\n\n  const [isStartNodePressed, setIsStartNodePressed] = useState(false);\n\n  const [isTargetNodePressed, setIsTargetNodePressed] = useState(false);\n\n  const [pressedNode, setPressedNode] = useState(false);\n\n  const [prevCoordinates, setPrevCoordinates] = useState([\n    initialStartRow,\n    initialStartColumn,\n  ]);\n\n  const [currentStartCoordinates, setCurrentStartCoordinates] = useState([\n    initialStartRow,\n    initialStartColumn,\n  ]);\n\n  const [currentTargetCoordinates, setCurrentTargetCoordinates] = useState([\n    initialTargetRow,\n    initialTargetColumn,\n  ]);\n\n  const [prevTargetCoordinates, setPrevTargetCoordinates] = useState([\n    initialTargetRow,\n    initialTargetColumn,\n  ]);\n\n  const [nodeTwoStepsBack, setNodeTwoStepsBack] = useState([\n    prevCoordinates[0],\n    prevCoordinates[1],\n  ]);\n\n  const [targetTwoStepsBack, setTargetTwoStepsBack] = useState([\n    prevTargetCoordinates[0],\n    prevTargetCoordinates[1],\n  ]);\n\n  const [isOnWallNode, setIsOnWallNode] = useState(false);\n  const [isOnWeightNode, setIsOnWeightNode] = useState(false);\n\n  const [algoDone, setAlgoDone] = useState(false);\n  const [disable, setDisable] = useState(false);\n\n  const weightKeyPressed = useKeyPress(\"w\");\n\n  const buildWalls = (grid, row, column) => {\n    const node = grid[row][column];\n    if (weightKeyPressed && algorithm !== \"dfs\") {\n      if (node.status === \"\") {\n        document\n          .getElementById(`${node.row}-${node.column}`)\n          .classList.add(\"weight\");\n      } else if (node.status === \"weight\") {\n        document\n          .getElementById(`${node.row}-${node.column}`)\n          .classList.remove(\"weight\");\n      }\n    } else {\n      if (node.status === \"wall\") {\n        document\n          .getElementById(`${node.row}-${node.column}`)\n          .classList.remove(\"wall\");\n      } else if (node.status === \"\") {\n        document\n          .getElementById(`${node.row}-${node.column}`)\n          .classList.add(\"wall\");\n      }\n    }\n  };\n\n  const updateWalls = (grid) => {\n    const newGrid = grid.slice();\n    grid.forEach((row) => {\n      row.forEach((node) => {\n        const nodeById = document.getElementById(`${node.row}-${node.column}`);\n        if (nodeById.classList.contains(\"weight\")) {\n          let newNode = {\n            ...node,\n            status: \"weight\",\n          };\n          newGrid[node.row][node.column] = newNode;\n        }\n        if (nodeById.classList.contains(\"wall\")) {\n          let newNode = {\n            ...node,\n            status: \"wall\",\n          };\n          newGrid[node.row][node.column] = newNode;\n        } else if (nodeById.className === \"node\") {\n          let newNode = {\n            ...node,\n            status: \"\",\n          };\n          newGrid[node.row][node.column] = newNode;\n        }\n      });\n    });\n    setGrid(newGrid);\n  };\n\n  const handleMouseDown = (row, column) => {\n    if (!disable) {\n      setPressedNode(true);\n      buildWalls(grid, row, column);\n    }\n  };\n\n  const handleMouseEnter = (row, column) => {\n    if (!pressedNode) return;\n\n    if (pressedNode) {\n      buildWalls(grid, row, column);\n    }\n  };\n\n  const handleMouseUp = () => {\n    setPressedNode(false);\n    updateWalls(grid);\n  };\n\n  const visualizeDijkstras = () => {\n    if (!disable) {\n      removePattern(grid);\n      resetGrid(grid);\n      const start =\n        grid[currentStartCoordinates[0]][currentStartCoordinates[1]];\n      const target =\n        grid[currentTargetCoordinates[0]][currentTargetCoordinates[1]];\n\n      const visitedNodesInOrder = dijkstra(grid, start, target);\n\n      const nodesInShortestPath = getNodesInShortestPath(target);\n\n      animateAlgorithm(visitedNodesInOrder, nodesInShortestPath);\n    }\n  };\n\n  const visualizeAstar = () => {\n    if (!disable) {\n      removePattern(grid);\n      resetGrid(grid);\n      const start =\n        grid[currentStartCoordinates[0]][currentStartCoordinates[1]];\n      const target =\n        grid[currentTargetCoordinates[0]][currentTargetCoordinates[1]];\n\n      const visitedNodesInOrder = astar(grid, start, target);\n\n      const nodesInShortestPath = nodesInShortestPathAstar(target);\n\n      animateAlgorithm(visitedNodesInOrder, nodesInShortestPath);\n    }\n  };\n\n  const visualizeDfs = () => {\n    if (!disable) {\n      removePattern(grid);\n      resetGrid(grid);\n      const start =\n        grid[currentStartCoordinates[0]][currentStartCoordinates[1]];\n      const target =\n        grid[currentTargetCoordinates[0]][currentTargetCoordinates[1]];\n      const visitedNodesInOrder = depthFirstSearch(grid, start, target);\n      const nodesInShortestPath = nodesInShortestPathDfs(target);\n      animateAlgorithm(visitedNodesInOrder, nodesInShortestPath);\n    }\n  };\n\n  const animateAlgorithm = (visitedNodesInOrder, nodesInShortestPath) => {\n    setDisable(true);\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          animateShortestPath(nodesInShortestPath);\n        }, speedValue * i);\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        if (node) {\n          if (node.status === \"target\") {\n            setAlgoDone(true);\n          }\n\n          if (node.status === \"start\") {\n            document.getElementById(`${node.row}-${node.column}`).className =\n              \"node start visited\";\n          } else if (node.status === \"weight\") {\n            document.getElementById(`${node.row}-${node.column}`).className =\n              \"node visited weight\";\n          } else {\n            document.getElementById(`${node.row}-${node.column}`).className =\n              \"node visited\";\n          }\n        }\n      }, speedValue * i);\n    }\n  };\n\n  const animateShortestPath = (nodesInShortestPath) => {\n    for (let i = 0; i < nodesInShortestPath.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPath[i];\n        const previousNode = nodesInShortestPath[i - 1];\n\n        if (node.status === \"target\") {\n          setDisable(false);\n          document.getElementById(`${node.row}-${node.column}`).className =\n            \"node node-shortest-path target start\";\n        } else {\n          document.getElementById(`${node.row}-${node.column}`).className =\n            \"node node-shortest-path start\";\n        }\n\n        if (previousNode && previousNode.status !== \"start\") {\n          document\n            .getElementById(`${previousNode.row}-${previousNode.column}`)\n            .classList.remove(\"start\");\n        }\n      }, 50 * i);\n    }\n  };\n\n  const clearWalls = (grid) => {\n    if (!disable) {\n      removePattern(grid);\n      const newGrid = grid.slice();\n      grid.forEach((row) => {\n        row.forEach((node) => {\n          if (node.status === \"wall\") {\n            let newNode = {\n              ...node,\n              status: \"\",\n            };\n            newGrid[node.row][node.column] = newNode;\n          }\n          if (node.status === \"weight\") {\n            document\n              .getElementById(`${node.row}-${node.column}`)\n              .classList.remove(\"weight\");\n            let newNode = {\n              ...node,\n              status: \"\",\n            };\n            newGrid[node.row][node.column] = newNode;\n          }\n          if (node.isVisited) {\n            let newNode = {\n              ...node,\n              isVisited: false,\n            };\n            newGrid[node.row][node.column] = newNode;\n          }\n        });\n      });\n      setGrid(newGrid);\n    }\n  };\n\n  const removePattern = (grid) => {\n    grid.forEach((row) => {\n      row.forEach((node) => {\n        const nodeById = document.getElementById(`${node.row}-${node.column}`);\n        nodeById.classList.remove(\"visited\");\n        nodeById.classList.remove(\"node-shortest-path\");\n        if (node.status === \"target\") {\n          nodeById.classList.remove(\"start\");\n        }\n      });\n    });\n    setAlgoDone(false);\n  };\n\n  const resetGrid = (grid) => {\n    const newGrid = grid.slice();\n\n    grid.forEach((row) => {\n      row.forEach((node) => {\n        let newNode = {\n          ...node,\n          isVisited: false,\n          shortest: false,\n          distance: Infinity,\n          totalDistance: Infinity,\n          previousNode: null,\n        };\n        newGrid[node.row][node.column] = newNode;\n      });\n    });\n\n    setGrid(newGrid);\n  };\n\n  const resetAll = () => {\n    if (!disable) {\n      removePattern(grid);\n      clearWalls(grid);\n      const newGrid = createInitialGrid();\n      setCurrentStartCoordinates([initialStartRow, initialStartColumn]);\n      setCurrentTargetCoordinates([initialTargetRow, initialTargetColumn]);\n      setPrevCoordinates([initialStartRow, initialStartColumn]);\n      setPrevTargetCoordinates([initialTargetRow, initialTargetColumn]);\n\n      newGrid.forEach((row) => {\n        row.forEach((node) => {\n          let newNode = {\n            ...node,\n            status:\n              node.row === initialStartRow && node.column === initialStartColumn\n                ? \"start\"\n                : node.row === initialTargetRow &&\n                  node.column === initialTargetColumn\n                ? \"target\"\n                : \"\",\n            isVisited: false,\n            shortest: false,\n            distance: Infinity,\n            previousNode: null,\n          };\n          newGrid[node.row][node.column] = newNode;\n        });\n      });\n\n      setGrid(newGrid);\n    }\n  };\n\n  const startVisualize = () => {\n    if (algorithm === \"dijkstra\") {\n      visualizeDijkstras();\n    } else if (algorithm === \"astar\") {\n      visualizeAstar();\n    } else if (algorithm === \"dfs\") {\n      visualizeDfs();\n    }\n  };\n\n  const getGridWithMaze = (grid, walls) => {\n    const newGrid = grid.slice();\n    for (let wall of walls) {\n      let node = grid[wall[0]][wall[1]];\n\n      let newNode = {\n        ...node,\n        status: \"wall\",\n      };\n      newGrid[wall[0]][wall[1]] = newNode;\n    }\n\n    setGrid(newGrid);\n  };\n\n  const getGridWithWeightMaze = (grid, weights) => {\n    const newGrid = grid.slice();\n    for (let weight of weights) {\n      let node = grid[weight[0]][weight[1]];\n\n      let newNode = {\n        ...node,\n        status: \"weight\",\n      };\n      newGrid[weight[0]][weight[1]] = newNode;\n    }\n\n    setGrid(newGrid);\n  };\n\n  const animateMaze = (grid, walls) => {\n    for (let i = 0; i <= walls.length; i++) {\n      if (i === walls.length) {\n        resetGrid(grid);\n        clearWalls(grid);\n        setTimeout(() => {\n          getGridWithMaze(grid, walls);\n          setDisable(false);\n        }, 20 * i);\n\n        return;\n      }\n      const wall = walls[i];\n      const node = grid[wall[0]][wall[1]];\n      setTimeout(() => {\n        document.getElementById(`${node.row}-${node.column}`).className =\n          \"node wall\";\n      }, 20 * i);\n    }\n  };\n\n  const animateWeightMaze = (grid, weights) => {\n    for (let i = 0; i <= weights.length; i++) {\n      if (i === weights.length) {\n        resetGrid(grid);\n        clearWalls(grid);\n        setTimeout(() => {\n          getGridWithWeightMaze(grid, weights);\n          setDisable(false);\n        }, 20 * i);\n\n        return;\n      }\n      const weight = weights[i];\n      const node = grid[weight[0]][weight[1]];\n      setTimeout(() => {\n        document.getElementById(`${node.row}-${node.column}`).className =\n          \"node weight\";\n      }, 20 * i);\n    }\n  };\n\n  const recursiveDivisionMaze = () => {\n    if (!disable) {\n      removePattern(grid);\n\n      resetGrid(grid);\n      setTimeout(() => {\n        const start =\n          grid[currentStartCoordinates[0]][currentStartCoordinates[1]];\n        const target =\n          grid[currentTargetCoordinates[0]][currentTargetCoordinates[1]];\n\n        setDisable(true);\n\n        const walls = recursiveDivision(grid, start, target);\n\n        animateMaze(grid, walls);\n      }, 20);\n    }\n  };\n\n  const buildRandomMaze = () => {\n    if (!disable) {\n      removePattern(grid);\n      resetGrid(grid);\n      setTimeout(() => {\n        const start =\n          grid[currentStartCoordinates[0]][currentStartCoordinates[1]];\n        const target =\n          grid[currentTargetCoordinates[0]][currentTargetCoordinates[1]];\n        setDisable(true);\n        const walls = randomMaze(grid, start, target);\n\n        animateMaze(grid, walls);\n      }, 20);\n    }\n  };\n\n  const buildRandomWeightMaze = () => {\n    if (!disable) {\n      removePattern(grid);\n      resetGrid(grid);\n      setTimeout(() => {\n        setDisable(true);\n        const start =\n          grid[currentStartCoordinates[0]][currentStartCoordinates[1]];\n        const target =\n          grid[currentTargetCoordinates[0]][currentTargetCoordinates[1]];\n        setDisable(true);\n        const weights = randomMaze(grid, start, target);\n\n        animateWeightMaze(grid, weights);\n      }, 20);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Menu\n        resetAll={() => resetAll()}\n        startVisualize={() => startVisualize()}\n        disable={disable}\n        setDisable={setDisable}\n        algorithm={algorithm}\n        setAlgorithm={(e) => setAlgorithm(e)}\n        algorithmSpeed={algorithmSpeed}\n        setAlgorithmSpeed={(e) => setAlgorithmSpeed(e)}\n        speedValue={speedValue}\n        setSpeedValue={(e) => setSpeedValue(e)}\n        clearWalls={() => clearWalls(grid)}\n        recursiveDivisionMaze={() => recursiveDivisionMaze()}\n        buildRandomMaze={() => buildRandomMaze()}\n        buildRandomWeightMaze={() => buildRandomWeightMaze()}\n        showTutorial={showTutorial}\n        setShowTutorial={(e) => setShowTutorial(e)}\n      />\n\n      <Tutorial\n        showTutorial={showTutorial}\n        setShowTutorial={() => setShowTutorial()}\n      />\n      <div className=\"container\">\n        <table className={styles.grid}>\n          <tbody>\n            {grid.map((row, rowIdx) => {\n              return (\n                <tr key={rowIdx}>\n                  {row.map((node, nodeIdx) => {\n                    const { row, column, status, isVisited, shortest } = node;\n\n                    return (\n                      <Node\n                        key={nodeIdx}\n                        shortest={shortest}\n                        row={row}\n                        column={column}\n                        status={status}\n                        isVisited={isVisited}\n                        isStartNodePressed={isStartNodePressed}\n                        isTargetNodePressed={isTargetNodePressed}\n                        pressedNode={pressedNode}\n                        onMouseDown={(row, column) =>\n                          handleMouseDown(row, column)\n                        }\n                        onMouseEnter={(row, column) =>\n                          handleMouseEnter(row, column)\n                        }\n                        onMouseUp={(row, column) => handleMouseUp(row, column)}\n                      ></Node>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n      <Info algorithm={algorithm} setAlgorithm={setAlgorithm} />\n    </Fragment>\n  );\n};\n\nfunction useKeyPress(targetKey) {\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []);\n\n  return keyPressed;\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from './components/Board';\n\nimport './assets/styles/styles.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}